掲示板形式だね。
それなら 「ピン」＝スレッド、「コメント」＝レス の関係で設計

フロントのモックアップ作る！


・JS API には Places API　の店舗情報表示などの機能のほとんどが含まれている。→ JS APIのみでOK

***
1コレクション (posts など) に全ての投稿(ドキュメント群)をまとめる

placeId でお店を特定

投稿ごとに waitTime, comment, createdAt, expiresAt を持つ

TTL インデックスを expiresAt に作れば自動削除可能
***
ドキュメントには placeId が必ず入る
→ これで Google Maps 上のピンに紐付け可能

・Google Maps JS API 側

地図上のピン表示は JS API に任せる⭐️

placeId で既存の店情報を取得（名前・住所・アイコンなど）⭐️

サーバーから受け取った posts をピンに紐付けて表示　？？？

例：投稿があればピンを強調表示／バッジ表示

・バックエンド

投稿の保存、取得、期限切れ管理はすべて MongoDB で担当⭐️

Google Maps 側には 投稿情報だけ渡す
→ 店舗データは JS API が自動取得⭐️
***



***フロント伝達事項***

1. DB は投稿だけ保持

コレクション名：posts（または queues）

ドキュメント構造：

{
  "placeId": "ChIJ123abcTokyo",
  "waitTime": 15,
  "comment": "回転良くてすぐ入れた！",
  "createdAt": "2025-09-03T15:00:00Z",
  "expiresAt": "2025-09-03T16:00:00Z"
}


店舗情報やピンの座標は Google Maps JS API から取得 するので DB には保持しない

2. Google Maps JS API の役割

地図表示

検索されたお店のピン表示

Place API から店舗情報取得（住所・名前など）

3. バックエンドの役割

投稿の CRUD 管理（投稿保存、一覧取得）

投稿の有効期限チェック（1時間で非表示）

フロントに投稿情報を渡す（placeId で対応するピンに紐付け）

5. フロントとの連携

ピンは JS API が描画

投稿（コメント・待ち時間）はバックエンドから取得して、フロントでピンに紐付けて表示

匿名掲示板形式でユーザー管理はな
***



ローカルサーバーと通信

DBと通信
***



hogehogeより先に router.get(/:placedId.....が読まれて

placedIdにhogehogeが代入されてしまう



Flutter

Kotlin でAndroidアプリ